@page "/banlist"
@using GXFormat
@inject HttpClient Http
@inject CardDatabase Database

<PageTitle>Banlist</PageTitle>

<h1>Banlist</h1>
@if (_formats == null || _formats.Count == 0)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div style="margin: 10px 0;">
        <InputSelect ValueExpression="@(()=>_selectedBanList)" Value="@_selectedBanList" ValueChanged="@((int value) => LoadBanlistAsync(value))">
            @for (int i = 0; i < _formats.Count; i++)
            {
                <option value="@i">@_formats[i]</option>
            }
        </InputSelect>
    </div>
    
    @foreach(var (limit, title) in _limits)
    {
        @if (_banlist.TryGetValue(limit, out var cards))
        {
            <h5>@title</h5>
            <table class="table">
                <thead>
                <tr>
                    <th>Name</th>
                    <th class="col-remarks">Remarks</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var (card, oldLimit) in cards)
                {
                    <tr class="tr-category-@card.Category.GetScore()">
                        <td>@card.Title</td>
                        <td class="col-remarks">@(oldLimit == limit ? "" : _oldlimits[oldLimit])</td>
                    </tr>
                }
                </tbody>
            </table>
        }
    }
}

@code
{
    private readonly Dictionary<int, string> _limits = new()
    {
        { -2, "Added" },
        { -1, "Unlimited" },
        { 0, "Removed" },
        { 1, "Limit 1" },
        { 2, "Limit 2" },
        { 3, "Limit 3" },
    };
    private readonly Dictionary<int, string> _oldlimits = new()
    {
        { -2, "Was not on the list" },
        { -1, "Was Unlimited" },
        { 0, "Was not on the list" },
        { 1, "Was at Limit 1" },
        { 2, "Was at Limit 2" },
        { 3, "Was at Limit 3" },
    };

    private readonly Dictionary<int, List<(Card card, int oldLimit)>> _banlist = new();
    private List<string>? _formats;
    private int _selectedBanList;

    protected override async Task OnInitializedAsync()
    {
        _formats = await Http.GetFromJsonAsync<List<string>?>("data/formats.json");
        if (_formats == null || _formats.Count == 0)
            return;

        _selectedBanList = 0;
        
        await LoadBanlistAsync(_selectedBanList);
    }

    private async Task LoadBanlistAsync(int index)
    {
        _selectedBanList = index;
        
        if (_formats == null || _formats.Count == 0)
            return;
        
        _banlist.Clear();

        var cardsToParse = new Dictionary<long, (int OldLimit, int NewLimit)>();
        var pool = await Http.GetStringAsync($"data/{_formats[index]}.lflist.conf");
        var gameFormat = new GameFormat();
        gameFormat.LoadData(pool);

        foreach (var (cardId, cardLimit) in gameFormat.CardPool)
            cardsToParse[cardId] = (-2, cardLimit);

        // Compare with the old list
        var loadOldList = index + 1 < _formats.Count;
        if (loadOldList)
        {
            var oldPool = await Http.GetStringAsync($"data/{_formats[index + 1]}.lflist.conf");
            var oldGameFormat = new GameFormat();
            oldGameFormat.LoadData(oldPool);

            foreach (var (cardId, cardLimit) in oldGameFormat.CardPool)
            {
                if (cardsToParse.TryGetValue(cardId, out var tuple))
                {
                    if (cardLimit == tuple.NewLimit && tuple.NewLimit == -1)
                    {
                        cardsToParse.Remove(cardId);
                    }
                    else
                    {
                        cardsToParse[cardId] = (cardLimit, tuple.NewLimit);
                    }
                }
                else
                {
                    cardsToParse[cardId] = (cardLimit, 0);
                }
            }
        }

        // Add finished set to the banlist list
        foreach (var (cardId, (oldLimit, newLimit)) in cardsToParse)
        {
            if (!loadOldList && newLimit == -1)
                continue;
            
            if (!_banlist.ContainsKey(newLimit))
                _banlist[newLimit] = new();
        
            _banlist[newLimit].Add((Database.GetCard(cardId), loadOldList ? oldLimit : newLimit));
        }
        
        // Sort lists
        foreach (var (_, cards) in _banlist)
        {
            cards.Sort((s1, s2) =>
            {
                var s1Category = s1.card.Category.GetScore();
                var s2Category = s2.card.Category.GetScore();

                if (s1Category != s2Category)
                    return s1Category - s2Category;

                return string.Compare(s1.card.Title, s2.card.Title, StringComparison.Ordinal);
            });
        }
    }
}
